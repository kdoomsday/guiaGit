#+TITLE:Guia fundamentos Git
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css" />
* Términos de importancia
** Git init
   Inicializar un repositorio git, típicamente local. Se utiliza cuando no se
   tiene un repositorio aún.
#+BEGIN_SRC 
 git init <dir>
 git init . 
#+END_SRC
** Git clone
   *Clonar* un repositorio ya existente. Es más común que ~git init~ ya que
   típicamente ya existe un repositorio en algún lado.
#+BEGIN_SRC 
   git clone <repositorio> 
#+END_SRC
   Al final de un ~clone~ se tiene una copia idéntica al repositorio remoto,
*incluyendo toda la historia*.
** Git checkout
   Cambiar posición del apuntador. Permite cambiar de rama, ir atrás en la
   historia, etc.
#+BEGIN_SRC 
   git checkout <ruta | rama>
   git checkout -b <nueva rama> <rama>
#+END_SRC
   Es útil combinarlo con ~git log~ o ~git branch --list~ para determinar a dónde
   se quiere cambiar de posición.
** Git branch
   Operaciones generales sobre ramas. Algunas variantes son:
   - ~git branch --list~ :: Listar las ramas existentes
   - ~git branch -d <rama>~ :: Eliminar una rama
   - ~git branch <nombre>~ :: Crear una nueva rama aquí, con el nombre especificado
** Git merge
   Unir (fusionar) los cambios del punto especificado con el actual.
   La forma básica es:
#+BEGIN_SRC 
    git merge <commit>
#+END_SRC 
    En caso de conflictos, se deben resolver los mismos. Se pueden usar las
    siguientes operaciones durante conflictos de merge:
    - Abort: ~git merge --abort~ :: Cancelar el ~merge~ completamente. Los cambios
         que se hayan hecho durante la operación se descartan.
    - Continue: ~git merge --continue~ :: Continuar el ~merge~. Asume que los
         conflictos actuales han sido resueltos. De no ser así, se reporta un
         error y no se continúa.
         
*** /Fast forward/
    Si el punto que recibe los cambios es un ancestro directo del punto del que
    se extraen los mismos, se considera que se puede hacer un /fast forward/. En
    este caso el ~merge~ consiste solamente en mover el apuntador a la ubicación
    correcta.
#+BEGIN_SRC 
    git merge --ff <commit>
    git merge --ff-only <commit>
#+END_SRC
    Con la primera invocación, si se puede se realiza el merge como /fast forward/.
    Con la segunda, si *no* se puede hacer /fast forward/ no se realizan cambios
    y se reporta el error.
** Git fetch
   Traer información actualizada de los repositorios remotos. No se puede saber
   si hay cambios remotos o no hasta que se realice un ~fetch~ o un ~pull~.
#+BEGIN_SRC 
   git fetch 
#+END_SRC
** Git pull
   Combina un ~fetch~ con un ~merge~. Ahorra tiempo para esta combinación de
   operaciones.
#+BEGIN_SRC 
   git pull 
#+END_SRC
** Git add
   Agregar arhivos *al cambio actual*. Si el archivo no está en control de
   versiones (porque es nuevo, por ejemplo) lo pone en control de versiones y
   lo deja listo para hacer commit. Si ya existe sólo lo agrega a la lista de
   cambios actual.
#+BEGIN_SRC 
   git add <archivo>
   git add . 
#+END_SRC
   La segunda versión agrega todos los archivos del directorio actual. Si estamos
   en la raíz del proyecto tiene el efecto de agregar todas las modificaciones.
** Git commit
   Registrar los cambios actuales en la rama local. Ningún cambio es persistido
   hasta que no se realice un commit.
#+BEGIN_SRC 
   git commit
   git commit -m <msg> 
#+END_SRC
*** Mejores prácticas
**** Una unidad de cambio por commit
     Cada commit debería ser un conjunto de cambios que lógicamente estén
     relacionados.
**** El mensaje del commit debe explicar la razón de ser del mismo
     Esto ayuda a identificar posteriormente los cambios en caso de necesidad y
     por qué se realizaron los mismos.
**** Solo una descripción breve del cambio en la primera línea
     Debe identificar todo el cambio simplemente. En caso de requerir más
     explicación, se puede dejar la segunda línea en blanco y detallar más en el
     resto del mensaje. Aún así no se estila mensajes demasiado largos.
**** No colocar información que ya se puede conseguir
     Ya git indica el momento del cambio, quién lo realizó y qué archivos fueron
     modificados. La información importante a agregar es la intención del cambio.
** Git status
   Muestra el estatus actual del /working tree/ Esto incluye:
   - Archivos que no están manejados por git aún
   - Archivos modificados que no han sido agregados para el commit actual
   - Archivos que son parte del commit actual
   
#+BEGIN_SRC 
   git status 
#+END_SRC
** Git reset
   Resetear HEAD al estado especificado. Se usa más que nada de la siguiente forma
#+BEGIN_SRC 
   git reset --hard 
#+END_SRC
   El efecto de un ~reset --hard~ es deshacer todos los cambios en la rama
   actual de forma que queda como estaba en el último /commit/.
** Git push
   Subir los cambios de la rama actual a la rama remota.
#+BEGIN_SRC 
   git push origin master 
   git push origin develop 
#+END_SRC
   Los cambios realizados, aún cuando se les haya realizado un ~commit~, no
   existen en el repositorio remoto hasta que no se realice una operación de
   ~push~.
   En su forma por defecto, si el repositorio remoto contiene cambios que no se
   encuentran presentes en el repositorio local, el comando se rehúsa a cambiar
   en el remoto. En este caso es necesario realizar un ~merge~ localmente primero
   para luego poder enviar los cambios locales.
   Es posible evitar el chequeo de existencia de cambios en el remoto, pero
   *se recomienda fuertemente no intentarlo*. Se van a perder cambios en la
   historia del repositorio de forma *permanente* e *irreversible*.
** Git stash
   Guardar todos los cambios actuales de forma de estar nuevamente en un árbol
   de trabajo limpio. Este comando tiene todos los subcomandos relacionados con
   el manejo de /stashes/.
   Por referencia se mustran las variantes más comunes a continuación.
   - ~git stash list~ :: Mostrar los /stashes/ existentes
   - ~git stash push~ :: Crear un nuevo /stash/ con todos los cambios actuales
   - ~git stash apply~ :: Aplicar los cambios de un /stash/ en el punto actual
   - ~git stash pop~ :: Aplicar los cambios al punto actual y eliminar el /stash/
   - ~git stash drop~ :: Eliminar un /stash/
** Git log
   Mostrar el historial de cambios.
#+BEGIN_SRC 
   git log
   git log --oneline 
#+END_SRC
   La primera forma muestra el log completo, mientras que la segunda muestra un
   cambio por línea. De esta forma es más rápido conseguir los cambios y es la
   manera como comunmente se muestra el historial en las herramientas de git.
* Flujo de trabajo en git
  Se asume que ya fue creado el repositorio local (~init~ o ~clone~).
  Adicionalmente, se recomienda crear las ramas *master* y *develop*, si no
  existen aún.
  1. Trabajar en la rama de desarrollo (~git checkout develop~)
  2. Determinar el cambio que se quiere implementar
  3. Crear una rama para el cambio que se va a aplicar (~git checkout -b nuevoFeature~)
  4. Realizar los cambios y probar.
  5. Agregar los archivos cambiados a la lista de cambios (~git add .~)
  6. Realizar el /commit/ de los cambios lógicos (~git commit -m "mensaje"~)
  7. Si no está terminado el cambio completo aún, regresar a *4*
  8. Regresar a la rama de *develop* (~git checkout develop~)
  9. Integrar los cambios (~git merge --ff-only nuevoFeature~)
  10. Eliminar la rama ya integrada (~git branch -D nuevoFeature~)
* Ignorar archivos del proyecto
  A menudo es deseable que la herramienta no tome en cuenta ciertos archivos del
  proyecto (típicamente los archivos generados al compilar o semejantes). Para
  este fin existe el archivo *.gitignore*. Dentro del mismo se configuran
  reglas de cuáles archivos no se tomarán en cuenta al momento de calcular el
  estado del proyecto.

  Un *.gitignore* minimal podría contener lo siguiente:
#+BEGIN_SRC gitignore
  # Ignorar los archivos generados del proyecto (todo el directorio target)
  target/

  # Ignorar los archivos generados por el compilador de java
  *.class

  # Archivos de log
  *.log
#+END_SRC

